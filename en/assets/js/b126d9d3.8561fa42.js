"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[590],{256:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var o=n(4520),r=n(4848),a=n(8453);const s={slug:"MDQL",title:"Your own structured query language",authors:["Nicolas"],tags:["story"]},i=void 0,l={authorsImageUrls:[void 0]},c=[];function u(e){const t={admonition:"admonition",code:"code",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"MDQL \u2014 MarkDown Query Language"}),"\n",(0,r.jsx)(t.p,{children:"If earlier to get context from a file it was necessary to either look at pre-created tl;dr, or ask a separate agent to compress the context from the file,"}),"\n",(0,r.jsxs)(t.p,{children:["now there is a separate query language for querying or changing data in MD files \u2014 ",(0,r.jsx)(t.strong,{children:"MDQL"}),"."]}),"\n",(0,r.jsxs)(t.admonition,{title:"MDQL",type:"info",children:[(0,r.jsx)(t.p,{children:"This is a language inherited from GraphQL, allowing agents to get and change only the necessary data from Markdown files. This ensures programmatic tl;dr, as well as transparency and control over queries."}),(0,r.jsx)(t.p,{children:"MDQL optimizes work with a large number of documents, reducing data redundancy and speeding up query processing."}),(0,r.jsx)(t.p,{children:"Both reading and writing are supported, which allows not only to retrieve information, but also to automatically update or structure the content."}),(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Example"})," of a simple MDQL query:"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-GraphQL",children:'{\n  file(path: "characters/hero.md") {\n    frontmatter {\n      name\n      role\n    }\n    content(filter: "skills") {\n      title\n      description\n    }\n  }\n}\n'})}),(0,r.jsx)(t.p,{children:"This query will extract only the name, role, and description of skills from the hero file."}),(0,r.jsx)(t.admonition,{title:"This is just an example",type:"caution",children:(0,r.jsx)(t.p,{children:"MDQL is just an idea for now, the implementation will most likely look completely different"})})]})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},4520:e=>{e.exports=JSON.parse('{"permalink":"/Norchevsky/en/blog/MDQL","editUrl":"https://github.com/teta42/Norchevsky/edit/main/blog/2025-08-08-MDQL.md","source":"@site/i18n/en/docusaurus-plugin-content-blog/2025-08-08-MDQL.md","title":"Your own structured query language","description":"MDQL \u2014 MarkDown Query Language","date":"2025-08-08T00:00:00.000Z","tags":[{"inline":false,"label":"Story","permalink":"/Norchevsky/en/blog/tags/story","description":"Talking about something"}],"readingTime":0.91,"hasTruncateMarker":true,"authors":[{"name":"Nicolas Tetha","title":"Localhost CEO, Creator of Norchevsky","url":"https://t.me/Petaurka","page":{"permalink":"/Norchevsky/en/blog/authors/nicolas"},"socials":{"github":"https://github.com/teta42"},"imageURL":"https://avatars.githubusercontent.com/u/138377302?v=4","key":"Nicolas"}],"frontMatter":{"slug":"MDQL","title":"Your own structured query language","authors":["Nicolas"],"tags":["story"]},"unlisted":false,"prevItem":{"title":"Failure in Localization \ud83d\ude1e","permalink":"/Norchevsky/en/blog/failure-in-localization"},"nextItem":{"title":"About Hooks","permalink":"/Norchevsky/en/blog/hooks-and-paths"}}')},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var o=n(6540);const r={},a=o.createContext(r);function s(e){const t=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);